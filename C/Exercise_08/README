1. Code:

	#include <stdio.h>

	int main(int argc, char *argv[]){
	    int areas[] = {10, 12, 13, 14, 20};
	    char name[] = "Zed";
	    char full_name[] = {
	        'Z', 'e', 'd',
	         ' ', 'A', '.', ' ',
	         'S', 'h', 'a', 'w', '\0'
	    };

	    // WARNING: On some systems you may have to change the
	    // %ld in this code to a %u since it will use unsigned ints
	    printf("The size of an int: %ld\n", sizeof(int));
	    printf("The size of areas (int[]): %ld\n",
	            sizeof(areas));
	    printf("The number of ints in areas: %ld\n",
	            sizeof(areas) / sizeof(int));
	    printf("The first area is %d, the 2nd %d.\n",
	            areas[0], areas[1]);

	    printf("The size of a char: %ld\n", sizeof(char));
	    printf("The size of name (char[]): %ld\n",
	            sizeof(name));
	    printf("The number of chars: %ld\n",
	            sizeof(name) / sizeof(char));

	    printf("The size of full_name (char[]): %ld\n",
	            sizeof(full_name));
	    printf("The number of chars: %ld\n",
	            sizeof(full_name) / sizeof(char));

	    printf("name=\"%s\" and full_name=\"%s\"\n",
	            name, full_name);

	    return 0;
	}

2. Breaking this program is fairly easy. Try some of these:
	- Get rid of the '\0' at the end of full_name and re-run it. Run it under Valgrind too. Now, move the definition of full_name to the top of main before areas. Try running it under Valgrind a few times and see if you get some new errors. In some cases, you might still get lucky and not catch any errors.
	- Change it so that instead of areas[0] you try to print areas[10] and see what Valgrind thinks of that.
	- Try other versions of these, doing it to name and full_name too.

3. Extra Credit
	- Try assigning to elements in the areas array with areas[0] = 100; and similar.
	- Try assigning to elements of name and full_name.
	- Try setting one element of areas to a character from name.
	- Go search online for the different sizes used for integers on different CPUs
